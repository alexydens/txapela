# Shell
SHELL=/bin/sh

# Directories already present
SRC_DIR=src
INC_DIR=include
CONF_DIR=conf

# Directories that may not be present
OBJ_DIR=obj
BIN_DIR=bin
ISO_DIR=iso
LOG_DIR=log
TOOLCHAIN_DIR=tx-toolchain
LIMINE_DIR=limine

# Toolchain
BOCHS=$(TOOLCHAIN_DIR)/bochs-x86_64/bochs-2.8/bochs
CC=$(TOOLCHAIN_DIR)/x86_64-elf/cross/bin/x86_64-elf-gcc
CXX=$(TOOLCHAIN_DIR)/x86_64-elf/cross/bin/x86_64-elf-g++
AS=$(TOOLCHAIN_DIR)/x86_64-elf/cross/bin/x86_64-elf-as
LD=$(TOOLCHAIN_DIR)/x86_64-elf/cross/bin/x86_64-elf-ld

# PROJECT STRUCTURE:
# Pre-existing:
# 	src/ 					-> source files
# 	include/			-> C/C++ header files
# 	conf/					-> configuration files and linker scripts
# Built seperately:
# 	tx-toolchain/	-> toolchain files (must build to use)
# 	limine/ 			-> bootloader (cloned from github, must build to use)
# From build:
# 	obj/					-> object files from compilation
# 	bin/ 					-> binary files from linking and building image
# 	iso/					-> the root directory of the ISO image
# From test:
# 	log/					-> log files generated by the test

# Compiler flags
CFLAGS = -std=c11 -Wall -Wextra -Wpedantic -Werror
CFLAGS += -I$(INC_DIR)/
CFLAGS += -ffreestanding
CFLAGS += -fno-stack-protector -fno-stack-check -fno-PIC
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -mno-80387
CFLAGS += -mno-mmx -mno-sse -mno-sse2
CFLAGS += -mno-red-zone
CFLAGS += -mcmodel=kernel

# Linker flags
LDFLAGS = -nostdlib -static -z max-page-size=0x1000
LDFLAGS += -T $(CONF_DIR)/linker.ld

# Source files
C_SOURCES = $(wildcard $(SRC_DIR)/*.c)
CXX_SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
ASM_SOURCES = $(wildcard $(SRC_DIR)/*.S)

# Object files
OBJECTS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(C_SOURCES))
OBJECTS += $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CXX_SOURCES))
OBJECTS += $(patsubst $(SRC_DIR)/%.S, $(OBJ_DIR)/%.o, $(ASM_SOURCES))

# Compiling
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR) $(TOOLCHAIN_DIR)
	$(CC) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR) $(TOOLCHAIN_DIR)
	$(CXX) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.S | $(OBJ_DIR) $(TOOLCHAIN_DIR)
	$(AS) $(CFLAGS) -c $< -o $@

# Linking
$(BIN_DIR)/txapela: $(OBJECTS) | $(OBJ_DIR) $(BIN_DIR) $(TOOLCHAIN_DIR)
	$(LD) $(LDFLAGS) $(OBJECTS) -o $@

# Iso image
$(BIN_DIR)/txapela.iso: $(BIN_DIR)/txapela $(LIMINE_DIR)
	mkdir -p $(ISO_DIR)/boot/limine
	mkdir -p $(ISO_DIR)/EFI/BOOT
	cp -v $(BIN_DIR)/txapela $(ISO_DIR)/boot
	cp -v $(CONF_DIR)/limine.conf $(ISO_DIR)/boot/limine
	cp -v \
		$(LIMINE_DIR)/limine-bios.sys \
		$(LIMINE_DIR)/limine-bios-cd.bin \
		$(LIMINE_DIR)/limine-uefi-cd.bin \
		$(ISO_DIR)/boot/limine
	cp -v $(LIMINE_DIR)/BOOTX64.EFI $(ISO_DIR)/EFI/BOOT/BOOTX64.EFI
	cp -v $(LIMINE_DIR)/BOOTIA32.EFI $(ISO_DIR)/EFI/BOOT/BOOTIA32.EFI
	xorriso -as mkisofs -b boot/limine/limine-bios-cd.bin      \
		-no-emul-boot -boot-load-size 4 -boot-info-table         \
		--efi-boot boot/limine/limine-uefi-cd.bin                \
		-efi-boot-part --efi-boot-image --protective-msdos-label \
		$(ISO_DIR) -o $(BIN_DIR)/txapela.iso
	$(LIMINE_DIR)/limine bios-install $(BIN_DIR)/txapela.iso

$(ISO_DIR):
	mkdir -p $@
$(BIN_DIR):
	mkdir -p $@
$(OBJ_DIR):
	mkdir -p $@
$(LOG_DIR):
	mkdir -p $@
$(TOOLCHAIN_DIR):
	git clone https://github.com/alexydens/tx-toolchain.git $(TOOLCHAIN_DIR)
	sh $(TOOLCHAIN_DIR)/scripts/build.sh
$(LIMINE_DIR):
	git clone https://github.com/limine-bootloader/limine.git \
		--branch=v8.x-binary --depth=1 $(LIMINE_DIR)
	$(MAKE) -C $(LIMINE_DIR)

.PHONY: clean full-clean build test

build: $(BIN_DIR)/txapela.iso

test: $(BIN_DIR)/txapela.iso | $(LOG_DIR)
	$(BOCHS) -qf $(CONF_DIR)/bochsrc.txt

clean:
	rm -rf $(OBJ_DIR)
	rm -rf $(BIN_DIR)
	rm -rf $(ISO_DIR)
	rm -rf $(LOG_DIR)

full-clean: clean
	rm -rf $(TOOLCHAIN_DIR)
	rm -rf $(LIMINE_DIR)
